apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgis.fullname" . }}
  labels:
{{ include "postgis.labels" . | indent 4 }}
spec:
  serviceName: {{ include "postgis.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "postgis.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "postgis.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if and .Values.dataImport.enabled }}
        - name: init-data
          image: alpine
          command: ["/bin/sh","/mnt/init-data.sh"]
          env:
            {{- with .Values.extraInitEnv }}
            {{- tpl . $ | nindent 12 }}
            {{- end }}
          envFrom:
            {{- with .Values.extraInitEnvFrom }}
            {{- tpl . $ | nindent 12 }}
            {{- end }}
          volumeMounts:
            - name: init-configmap
              mountPath: /mnt/
            - name: datadir
              mountPath: /docker-entrypoint-initdb.d/
              subPath: entrypoint
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 5432
              name: postgres
              protocol: TCP
          env:
            - name: POSTGRES_PASSWORD
              value: "{{ .Values.postgres.password }}"
            - name: POSTGRES_USER
              value: "{{ .Values.postgres.user }}"
            - name: POSTGRES_DB
              value: "{{ .Values.postgres.db }}"
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - exec pg_isready -U "{{ .Values.postgres.user }}" -h 127.0.0.1 -p 5432 -t "{{ .Values.livenessProbe.timeoutSeconds }}"
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - exec pg_isready -U "{{ .Values.postgres.user }}" -h 127.0.0.1 -p 5432 -t "{{ .Values.readinessProbe.timeoutSeconds }}"
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            exec:
              command:
              - sh
              - -c
              - exec pg_isready -U "{{ .Values.postgres.user }}" -h 127.0.0.1 -p 5432 -t "{{ .Values.startupProbe.timeoutSeconds }}"
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          - name: datadir
            mountPath: /var/lib/postgresql/data
            subPath: data
          {{- if or .Values.postgres.customInit.enabled }}
          - name: init-db-sql
            mountPath: /docker-entrypoint-initdb.d/
          {{- end }}
          {{- if .Values.dataImport.enabled }}
          - name: datadir
            mountPath: /docker-entrypoint-initdb.d/
            subPath: entrypoint
          {{- end }}
      volumes:
        {{- if .Values.dataImport.enabled }}
        - name: init-configmap
          configMap:
            name: {{ include "postgis.fullname" . }}
            items:
              - key: init-data.sh
                path: init-data.sh
        {{- end }}
        {{- if .Values.postgres.customInit.enabled }}
        - name: init-db-sql
          configMap:
            name: {{ include "postgis.fullname" . }}
            items:
              - key: init.sql
                path: init.sql
        {{- end }}
        {{- if and .Values.persistence.enabled (not .Values.persistence.useExisting) }}
        - name: datadir
          persistentVolumeClaim:
            claimName: {{ include "postgis.fullname" . }}
        {{- else if and .Values.persistence.useExisting (.Values.persistence.existingPvcName) }}
        - name: datadir
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingPvcName }}
        {{- else }}
        - name: datadir
          emptyDir: { }
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
