apiVersion: v1
kind: ConfigMap
metadata:
  labels:
{{ include "shogun-boot.labels" . | indent 4 }}
  name: {{ include "shogun-boot.fullname" . }}
data:
  init-sh: |-
    #!/bin/sh
    export PGPASSWORD=${DB_PASSWORD}
    echo "SELECT 'CREATE DATABASE {{ .Values.postgres.databasename }}' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '{{ .Values.postgres.databasename }}')\gexec" | psql -h {{ .Values.postgres.host }} -U ${DB_USER}
    psql -h {{ .Values.postgres.host }} -U ${DB_USER} {{ .Values.postgres.databasename }} -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
  application-config: |-
    server:
      port: 8080
      # this flag is needed to properly redirect to https:
      forward-headers-strategy: framework
      max-http-header-size: 128KB
      servlet:
        context-path: /
      error:
        whitelabel:
          enabled: true
        include-stacktrace: never

    spring:
      servlet:
        multipart:
          max-file-size: 10MB
          max-request-size: 10MB
      main:
        banner-mode: off
      jpa:
        # Show SQL statements
        show-sql: {{ .Values.debug.sql }}
        open-in-view: true
        database-platform: org.hibernate.spatial.dialect.postgis.PostgisPG95Dialect
        hibernate:
          jdbc:
            lob:
              non_contextual_creation: true
          ddl-auto: none
        properties:
          jakarta:
            persistence:
              sharedCache:
                # Only entities with @Cacheable annotation will use L2 cache
                mode: ENABLE_SELECTIVE
          org:
            hibernate:
              # See https://docs.jboss.org/envers/docs/#configuration
              envers:
                default_schema: shogun_rev
                audit_table_prefix: _rev
                global_with_modified_flag: true
          hibernate:
            id:
              db_structure_naming_strategy: single
            jakarta:
              cache:
                provider: org.ehcache.jsr107.EhcacheCachingProvider
                uri: ehcache.xml
            format_sql: true
            # Generate statistics to check if L2/query cache is actually being used
            generate_statistics: {{ .Values.debug.cache }}
            cache:
              # Enable L2 cache
              use_second_level_cache: true
              # Enable query cache
              use_query_cache: true
              region:
                factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
            integration:
              envers:
                # Set this to false to disable auditing entity changes
                enabled: {{ .Values.envers.enabled }}
      messages:
        basename: org/springframework/security/messages, de/terrestris/shogun/lib/messages
      jackson:
        serialization:
          fail-on-empty-beans: false
      flyway:
        enabled: true
        baselineOnMigrate: true
        locations: classpath:db/migration
        defaultSchema: shogun
        schemas: shogun, public
        outOfOrder: false
      datasource:
        platform: postgres
        url: jdbc:postgresql://{{ .Values.postgres.host }}/{{ .Values.postgres.databasename }}?currentSchema={{ .Values.postgres.schema }}
        username: ${DB_USER}
        password: ${DB_PASSWORD}
      session:
        store-type: none
      {{- if .Values.mail.enabled }}
      mail:
        host: {{ .Values.mail.host }}
        port: {{ .Values.mail.port }}
        protocol: smtp
        username: ${MAIL_USER}
        password: ${MAIL_PASSWORD}
        properties:
          mail:
            transport:
              protocol: smtp
            smtp:
              auth: true
              starttls:
                enable: true
              timeout: 8000
      {{- end }}
      security:
        oauth2:
          resourceserver:
            jwt:
              issuer-uri: {{ .Values.keycloak.url }}/realms/{{ .Values.keycloak.realm }}
              jwk-set-uri: {{ .Values.keycloak.url }}/realms/{{ .Values.keycloak.realm }}/protocol/openid-connect/certs
      graphql:
        graphiql:
          enabled: {{ .Values.debug.graphiql }}

    keycloak:
      enabled: true
      server-url: {{ .Values.keycloak.url }}
      username: ${KEYCLOAK_USER}
      password: ${KEYCLOAK_PASSWORD}
      master-realm: {{ .Values.keycloak.masterRealm }}
      admin-client-id: {{ .Values.keycloak.adminClientId }}
      realm: {{ .Values.keycloak.realm }}
      client-id: {{ .Values.keycloak.clientId }}
      principal-attribute: preferred_username
      disableHostnameVerification: true
      internal-server-url: shogun-keycloak

    controller:
      applications:
        enabled: {{ .Values.controller.applications }}
      auth:
        enabled: {{ .Values.controller.auth }}
      cache:
        enabled: {{ .Values.controller.cache }}
      files:
        enabled: {{ .Values.controller.files }}
      groups:
        enabled: {{ .Values.controller.groups }}
      imagefiles:
        enabled: {{ .Values.controller.imagefiles }}
      info:
        enabled: {{ .Values.controller.info }}
      layers:
        enabled: {{ .Values.controller.layers }}
      users:
        enabled: {{ .Values.controller.users }}
      resource:
        enabled: {{ .Values.controller.resource }}

    upload:
      file:
        supportedContentTypes:
          - application/json
          - application/pdf
          - application/xml
          - application/zip
          - text/comma-separated-values
          - text/plain
          - text/xml
      image:
        thumbnailSize: 100
        supportedContentTypes:
          - image/bmp
          - image/gif
          - image/jpeg
          - image/png
          - image/svg+xml
          - image/tiff
      basePath: /data
      maxSize: 500M

    support:
      email: {{ .Values.support.email }}

    logging:
      config: /config/log4j2.yml
      file:
        name: /var/log/shogun/shogun.log

    management:
      endpoints:
        web:
          exposure:
            include: "*"

  log4j2-config: |-
    Configuration:
      Appenders:
        Console:
          name: STDOUT
          PatternLayout:
            Pattern: '%highlight{%d{HH:mm:ss.SSS} %-5level %logger{36}.%M() @%L - %msg%n}{FATAL=red blink, ERROR=red, WARN=yellow bold, INFO=white, DEBUG=green bold, TRACE=blue}'
        RollingFile:
          name: ROLLING_FILE
          fileName: /var/log/shogun/shogun.log
          filePattern: "/var/log/shogun/shogun.log.%d{yyyy-MM-dd}.gz"
          PatternLayout:
            Pattern: '[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n'
          Policies:
            TimeBasedTriggeringPolicy:
              interval: 1
              modulate: true
            SizeBasedTriggeringPolicy:
              size: 100 MB
          DefaultRolloverStrategy:
            Delete:
              basePath: /var/log/shogun
              maxDepth: 2
              IfFileName:
                glob: "*/$shogun*log.gz"
              IfLastModified:
                age: 30d
      Loggers:
        Root:
          level: info
          AppenderRef:
            - ref: STDOUT
            - ref: ROLLING_FILE

        logger:
          - name: de.terrestris
            level: info
          - name: org.flywaydb
            level: info
          - name: com.zaxxer.hikari
            level: info
          - name: io.lettuce
            level: info
          - name: io.netty
            level: info
          - name: org.thymeleaf
            level: info
          - name: org.hibernate
            level: info
          - name: org.hibernate.SQL
            level: info
          - name: org.hibernate.type.descriptor.sql
            level: info
          - name: org.springframework.boot
            level: info
          - name: org.springframework
            level: info
          - name: org.keycloak
            level: info
          - name: org.springdoc
            level: info
          - name: com.graphql-java
            level: info
          - name: org.reflections
            level: error
  index-html: |-
    <html lang="en">

    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <meta name="description" content="Static landing page for the SHOGun demo">
      <meta name="author" content="The SHOGun contributors">

      <link rel="shortcut icon" type="image/x-icon" href="./assets/img/favicon.ico">

      <title>SHOGun</title>

      <!-- Bootstrap 5.1.1  -->
      <link href="./assets/lib/bootstrap/css/bootstrap.min.css" rel="stylesheet">
      <script src="./assets/lib/bootstrap/js/bootstrap.bundle.min.js"></script>
      <!-- Font Awesome 5.15.4 -->
      <link href="./assets/lib/fontawesome/css/all.min.css" rel="stylesheet">
      <link href="./index.css" rel="stylesheet">
      <script src="{{ .Values.keycloak.url }}/js/keycloak.js"></script>
    </head>

    <body>

      <header
        class="container d-flex flex-wrap align-items-center justify-content-center justify-content-md-between py-3 mb-4 border-bottom">
        <a href="/" class="d-flex align-items-center col-md-3 mb-2 mb-md-0 text-dark text-decoration-none">
          <img class="header-image" src="./assets/img/shogun_logo.png">
        </a>
        <ul class="nav col-md-3">
          <li class="nav-item">
            <a href="#" class="nav-link px-2 text-muted">Version: 18.0.0</a>
          </li>
        </ul>
        <button id="login-btn" class="btn btn-primary">Log in</button>
        <button id="logout-btn" class="btn btn-primary" hidden>Log out</button>
      </header>

      <main>
        <!-- web component template starts -->
        <template id="shogun-app" url="">
          <link href="./assets/lib/fontawesome/css/all.min.css" rel="stylesheet">
          <div class="app-card">
            <div class="app-buttons">
              <slot name="admin-btn"></slot>
            </div>
            <div class="app-info">
              <h4>
                <slot name="app-title">Default Title</slot>
              </h4>
              <p>
                <slot name="app-info">description</slot>
              </p>
            </div>
          </div>
          <style>
            .app-card {
              border-radius: 10px;
              background-color: rgba(248, 249, 250, 1);
              height: auto;
              cursor: pointer;
            }

            .app-card:hover {
              background-color: rgba(233, 236, 239, 1);
            }

            .app-buttons {
              display: flex;
              justify-content: end;
              padding: 5px;
            }

            .app-info {
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: center;
            }
          </style>
        </template>
        <!-- web component template ends -->

        <div class="container px-4 py-5">
          <h2 class="pb-2">Welcome to SHOGun</h2>
          <div style="display: none" id="keycloak-host"></div>
          <a href="/admin">
            <button id="admin-panel-btn" class="btn btn-primary">
              Open Admin Panel <i class="fas fa-lock"></i>
            </button>
          </a>
          <h3 class="pb-2 pt-4">Applications</h3>
          <div class="row row-cols-1 row-cols-md-3 g-4 apps" />
        </div>

      </main>

      <footer class="container d-flex justify-content-between align-items-center py-3 my-4 border-top">
        <p class="col-md-4 mb-0 text-muted">
          &copy; 2021 - present <a href="https://www.terrestris.de">terrestris GmbH & Co. KG</a>
        </p>
        <p class="col-md-3 mb-0 text-muted">
          <i class="fas fa-plug"></i>
          <a href="./swagger-ui/index.html">Swagger / OpenAPI</a>
        </p>
        <p class="col-md-3 mb-0 text-muted">
          <i class="fas fa-project-diagram"></i>
          <a href="./graphiql">GraphiQL</a>
        </p>
        <p class="col-md-3 mb-0 text-muted">
          <i class="fab fa-github"></i>
          <a href="https://github.com/terrestris/shogun">GitHub</a>
        </p>
      </footer>

      <script>
        window.onload = async () => {
          const keycloak = new Keycloak({
            url: '{{ .Values.keycloak.url }}',
            realm: 'SHOGun',
            clientId: 'shogun-client'
          });
          try {
            const authenticated = await keycloak.init({
              onLoad: 'check-sso'
            });
          } catch (error) {
            console.error(error);
            return;
          }

          // Register login/logout actions
          document.querySelector('#login-btn').addEventListener('click', () => {
            keycloak.login();
          });
          document.querySelector('#logout-btn').addEventListener('click', () => {
            keycloak.logout();
          });
          if (keycloak.authenticated) {
            document.querySelector('#logout-btn').hidden = false;
            document.querySelector('#login-btn').hidden = true;
          }

          const applications = await getApplications(keycloak.token);
          const appInfos = applications.map(app => ({
            id: app.id,
            name: app.name,
            description: app.clientConfig.description
          }));
          const appsEl = document.querySelector('.apps');

          // Create web components
          customElements.define('shogun-app',
            class extends HTMLElement {
              constructor() {
                super();
                const template = document.querySelector('#shogun-app');
                const templateContent = template.content;

                this.attachShadow({ mode: 'open' }).appendChild(
                  templateContent.cloneNode(true)
                );
              }
              connectedCallback() {
                this.onclick = () => window.open(`/client/index.html?applicationId=${this.getAttribute('app')}`);
              }
            });

          if (appsEl) {
            appInfos.forEach(app => {
              const html = `<shogun-app app='${app.id}'>` +
                `<a style='visibility: hidden' class='admin-btn' title='Edit application' slot='admin-btn' href='/admin/portal/application/${app.id}'>` +
                `<i class='fas fa-cog'></i></a>` +
                `<span slot='app-title'>${app.name}</span>` +
                `<span slot='app-info'>${app.description}</span>` +
                `</shogun-app>`;
              appsEl.insertAdjacentHTML('beforeend', html);
            });
          }

          // Check for admin role
          const hasAdminRole = keycloak.hasResourceRole('admin', 'shogun-admin');
          if (hasAdminRole) {
            document.querySelectorAll(".admin-btn").forEach(btn => {
              btn.style.visibility = 'visible';
            });
          };
        }

        const getApplications = async (token) => {
          try {
            const response = await fetch('/applications', {
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });
            const applications = await response.json();
            if (applications && applications.content) {
              return applications.content;
            } else {
              throw new Error('Error while fetching applications');
            }
          } catch (error) {
            console.error(error);
          }
        }
      </script>
    </body>

    </html>
