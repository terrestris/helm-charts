{{- if or .Values.initData.enabled .Values.environment.communityExtensions.names -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: geoserver-init-configmap
  labels:
{{ include "geoserver.labels" . | indent 4 }}
data:
  init-data.sh: |-
    #!/bin/sh
    if {{ not .Values.initData.enabled }}; then
      exit 0
    fi
    echo "Checking if geoserver_data is already initialized…"
    FILE={{ .Values.storage.dataDir }}/.init
    if [ -f "$FILE" ]; then
      echo "Directory geoserver_data already initialized."
    else
      echo "Downloading geoserver_data.tgz …"
      if ([ -z "$DL_USER" ] || [ -z "$DL_PASSWORD" ] || {{ not .Values.initData.credentials.authenticationRequired}} ); then
        echo "Downloading without credentials…"
        CMD="wget -O /mnt/download/geoserver_data.tgz '{{ .Values.initData.initDataUrl }}'"
      else
        echo "Downloading with basic auth credentials…"
        CMD="wget --user $DL_USER --password $DL_PASSWORD -O /mnt/download/geoserver_data.tgz '{{ .Values.initData.initDataUrl }}'"
      fi
      echo $CMD
      eval $CMD
      CMD="cd {{ .Values.storage.dataDir }}"
      echo $CMD
      eval $CMD
      CMD="tar xvf /mnt/download/geoserver_data.tgz"
      echo $CMD
      eval $CMD
      CMD="touch $FILE"
      echo $CMD
      eval $CMD
      echo "Successfully extracted geoserver_data directory to '{{ .Values.storage.dataDir }}'!"
    fi
  init-community-modules.sh: |-
    #!/bin/sh
    apk update && apk add ca-certificates
    echo "Checking if community modules are already loaded…"
    FILE={{ .Values.storage.additionalLibsDir }}/.community_modules_loaded
    if [ -f "$FILE" ]; then
      echo "Community modules already initialized."
    else
      echo "Downloading community modules …"
      for EXTENSION in $(echo "{{ .Values.environment.communityExtensions.names }}" | tr ',' ' '); do
        FILE_NAME="geoserver-{{ .Values.environment.communityExtensions.version }}-${EXTENSION}-plugin.zip"
        URL="{{ .Values.environment.communityExtensions.baseUrl }}$FILE_NAME"
        CMD="wget -c --no-check-certificate $URL -O $FILE_NAME"
        echo $CMD
        eval $CMD
        CMD="unzip -q -o -d '{{ .Values.storage.additionalLibsDir}}' $FILE_NAME '*.jar'"
        echo $CMD
        eval $CMD
      done
      CMD="ls {{ .Values.storage.additionalLibsDir }}"
      echo $CMD
      eval $CMD
      CMD="touch $FILE"
      echo $CMD
      eval $CMD
      echo "Successfully installed community modules to '{{ .Values.storage.additionalLibsDir }}'!"
    fi
  {{- if .Values.geofence.enableInitScript }}
  init-geofence.sh: |-
    #!/bin/sh
    echo "Initializing geofence config in {{ .Values.storage.dataDir }}/geofence/geofence-datasource-ovr.properties"
    mkdir -p {{ .Values.storage.dataDir }}/geofence
    cat > {{ .Values.storage.dataDir }}/geofence/geofence-datasource-ovr.properties << EOL
    geofenceVendorAdapter.databasePlatform=org.hibernatespatial.postgis.PostgisDialect
    geofenceDataSource.driverClassName=org.postgresql.Driver
    geofenceDataSource.url={{ .Values.geofence.dataSourceUrl }}
    geofenceDataSource.username=${GEOFENCE_DB_USER}
    geofenceDataSource.password=${GEOFENCE_DB_PASSWORD}
    geofenceEntityManagerFactory.jpaPropertyMap[hibernate.default_schema]=public
    geofenceEntityManagerFactory.jpaPropertyMap[hibernate.hbm2ddl.auto]=update
    EOL
  {{- end}}
  {{- if .Values.monitoring.enableInitScript }}
  init-monitoring.sh: |-
    #!/bin/sh
    echo "Initializing monitoring config by copying properties files to {{ .Values.storage.dataDir }}/monitoring"
    mkdir -p {{ .Values.storage.dataDir }}/monitoring && cp /mnt/{filter,monitor}.properties {{ .Values.storage.dataDir }}/monitoring/
  filter.properties: {{ .Values.monitoring.filterProperties | toYaml | indent 2 }}
  monitor.properties: {{ .Values.monitoring.monitorProperties | toYaml | indent 2 }}
  {{- end}}

{{- end}}
