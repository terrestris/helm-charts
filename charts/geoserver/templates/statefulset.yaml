apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "geoserver.fullname" . }}
  labels:
{{ include "geoserver.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "geoserver.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  serviceName: {{ include "geoserver.fullname" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "geoserver.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.initContainers }}
      initContainers:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.geofence.enableInitScript }}
      {{- if not .Values.initContainers }}
      initContainers:
      {{- end }}
        - name: init-geofence
          image: docker.terrestris.de/alpine
          command: [ "/bin/sh","/mnt/init-geofence.sh" ]
          volumeMounts:
            - name: init-geofence-volume
              mountPath: /mnt/
            - name: datadir
              mountPath: /opt/geoserver_data
          env:
          {{- with .Values.geofence.env }}
          {{- tpl . $ | nindent 12 }}
          {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: STABLE_EXTENSIONS
              value: {{ .Values.environment.stableExtensions }}
            - name: INSTALL_EXTENSIONS
              value: "{{ .Values.environment.installExtensions }}"
            - name: ADDITIONAL_LIBS_DIR
              value: {{ .Values.storage.additionalLibsDir }}
            - name: "EXTRA_JAVA_OPTS"
              value: {{ .Values.environment.javaOptions }}
            {{- with .Values.extraEnv }}
            {{- tpl . $ | nindent 12 }}
            {{- end }}
          envFrom:
            {{- with .Values.extraEnvFrom }}
            {{- tpl . $ | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.url }}
              port: http
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
          {{- end }}
          {{- if .Values.probes.startup.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.probes.startup.url }}
              port: http
            initialDelaySeconds: {{ .Values.probes.startup.initialDelaySeconds }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds }}
          {{- end }}
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.url }}
              port: http
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: datadir
              mountPath: {{ .Values.storage.dataDir }}
            - name: additional-libs
              mountPath: {{ .Values.storage.additionalLibsDir }}
          {{- if .Values.extraVolumeMounts }}
          {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
          {{- end }}
      volumes:
        - name: temp
          emptyDir: {}
        - name: additional-libs
          emptyDir: {}
        {{- if and .Values.persistence.enabled (not .Values.persistence.useExisting) }}
        - name: datadir
          persistentVolumeClaim:
            claimName: {{ include "geoserver.fullname" . }}
        {{- else if and .Values.persistence.useExisting (.Values.persistence.existingPvcName) }}
        - name: datadir
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingPvcName }}
        {{- else }}
        - name: datadir
          emptyDir: {}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
        {{- if .Values.geofence.enableInitScript }}
        - name: init-geofence-volume
          configMap:
            name: geoserver-init-configmap
            items:
              - key: init-geofence.sh
                path: init-geofence.sh
        {{- end }}
